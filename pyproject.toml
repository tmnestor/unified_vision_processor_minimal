[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "unified-vision-processor"
version = "0.1.0"
description = "Unified Vision Document Processing - Australian Tax Document Specialist"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Developer"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

[project.scripts]
unified-vision-processor = "vision_processor.cli.unified_cli:app"

[tool.ruff]
# Python version
target-version = "py311"

# Line length limit
line-length = 108

# Exclude directories
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".ruff_cache",
    "*.egg-info",
    ".venv",
    "venv",
    "build",
    "dist",
]

[tool.ruff.lint]
# Enable specific rule categories
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
]

# Ignore problematic rules that cause ongoing issues
ignore = [
    "E501",    # Line too long (keep existing code safe, but aim for 108 in new code)
    "ARG001",  # Unused function argument (often required by frameworks)
    "ARG002",  # Unused method argument (often required by interfaces)  
    "F841",    # Local variable assigned but never used (common in debugging)
]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Use spaces for indentation
indent-style = "space"

[tool.ruff.lint.isort]
known-first-party = ["vision_processor"]

[tool.pytest.ini_options]
# Pytest configuration (mirroring pytest.ini but in pyproject.toml)
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Default test selection for local development (Mac M1)
addopts = [
    "-v",
    "--tb=short", 
    "--strict-markers",
    "-m", "not gpu and not slow",
    "--durations=10"
]

# Markers for test categorization
markers = [
    "fast: marks tests as fast (can run on Mac M1)",
    "slow: marks tests as slow (requires powerful hardware)",
    "integration: marks tests as integration tests (real components)",
    "gpu: marks tests as requiring GPU/development machine",
    "unit: marks tests as unit tests (isolated components)",
    "cli: marks tests as CLI-specific",
    "cv: marks tests as computer vision-specific", 
    "prompt: marks tests as prompt system-specific",
]

# Logging
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Warnings
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]