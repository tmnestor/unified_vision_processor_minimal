# AWK-like Markdown Processing Configuration
# This file defines patterns, rules, and processing stages for robust markdown-to-keyvalue conversion

# Format Detection Patterns - AWK-style pattern matching
format_detection:
  markdown_table:
    patterns:
      - "\\|.*\\|.*\\|"  # Contains table pipes with content
      - "^\\|\\s*[^|]+\\s*\\|\\s*[^|]+\\s*\\|"  # Header row pattern
    confidence_threshold: 2  # Need at least 2 matches
    
  bullet_list:
    patterns:
      - "^\\s*\\*\\s+[^:]+:"  # Bullet points with colons
      - "^\\s*-\\s+[^:]+:"   # Dash points with colons
    confidence_threshold: 1
    
  structured_keyvalue:
    patterns:
      - "^[A-Z_]+:\\s*"  # Direct KEY: value format
      - "^[a-zA-Z][a-zA-Z\\s_]*:\\s*"  # Flexible key format
    confidence_threshold: 3
    
  plain_text:
    patterns:
      - ".*"  # Catch-all fallback
    confidence_threshold: 0

# Multi-stage Processing Pipeline (AWK-style BEGIN/MAIN/END)
processing_stages:
  # Stage 1: Format Detection and Preparation (BEGIN phase)
  begin_phase:
    - normalize_whitespace
    - detect_format
    - initialize_context
    
  # Stage 2: Content Processing (MAIN phase)
  main_phase:
    - extract_by_format
    - apply_fallback_patterns
    - validate_extractions
    
  # Stage 3: Cleanup and Finalization (END phase)
  end_phase:
    - clean_artifacts
    - format_output
    - final_validation

# Context State Machine - Track processing state
state_machine:
  states:
    - unknown
    - table_header
    - table_row
    - bullet_list
    - structured_kv
    - plain_text
    - error_fallback
    
  transitions:
    unknown:
      - table_header: "detect_table_start"
      - bullet_list: "detect_bullet_start"
      - structured_kv: "detect_kv_pattern"
      - plain_text: "default_fallback"
      
    table_header:
      - table_row: "process_table_content"
      - plain_text: "table_end_detected"
      
    table_row:
      - table_row: "continue_table"
      - plain_text: "table_end_detected"

# Format-specific Processing Rules
format_processors:
  markdown_table:
    patterns:
      header_row: "\\|\\s*([^|]+)\\s*\\|\\s*([^|]+)\\s*\\|"
      data_row: "\\|\\s*([^|]+)\\s*\\|\\s*([^|]+)\\s*\\|"
      separator: "^\\|[-\\s|]+\\|$"
    key_column: 0  # First column contains keys
    value_column: 1  # Second column contains values
    cleanup_patterns:
      - "^\\s*\\|\\s*"  # Remove leading pipes
      - "\\s*\\|\\s*$"  # Remove trailing pipes
      - "[-\\s]+"  # Remove separator content
      
  bullet_list:
    patterns:
      bullet_kv: "^\\s*[\\*-]\\s*([^:]+):\\s*(.+)$"
      nested_bullet: "^\\s{2,}[\\*-]\\s*([^:]+):\\s*(.+)$"
    cleanup_patterns:
      - "^\\s*[\\*-]\\s*"  # Remove bullet markers
      
  structured_keyvalue:
    patterns:
      standard_kv: "^([A-Z_]+):\\s*(.+)$"
      flexible_kv: "^([a-zA-Z][a-zA-Z\\s_]*):\\s*(.+)$"
      bracketed_kv: "^([A-Z_]+):\\s*\\[([^\\]]+)\\]$"
    key_normalization:
      - uppercase: true
      - replace_spaces: "_"
      - remove_special_chars: "[^A-Z_]"

# Fallback Pattern Library - Multi-tier AWK-like fallbacks
fallback_patterns:
  # Tier 1: Business-specific patterns
  business_patterns:
    ABN: 
      - "(?:ABN|A\\.B\\.N\\.?)\\s*:?\\s*(\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{3})"
      - "\\b(\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{3})\\b"
      - "\\b(\\d{11})\\b"
    TOTAL:
      - "(?:TOTAL|Total).*?(\\$\\d+\\.\\d{2})"
      - "(\\$\\d+\\.\\d{2})(?=\\s*$)"
      - "(?:AUD|AUD\\s*)(\\d+\\.\\d{2})"
    DATE:
      - "\\b(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})\\b"
      - "\\b(\\d{1,2}\\.\\d{1,2}\\.\\d{2,4})\\b"
    STORE:
      - "\\b([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)+)\\b"
      - "^([A-Z\\s]+)(?=\\s*ABN|$)"
      
  # Tier 2: Generic content patterns  
  generic_patterns:
    AMOUNTS: "(\\$\\d+(?:\\.\\d{2})?)"
    NUMBERS: "\\b(\\d{4,})\\b"
    NAMES: "\\b([A-Z][a-z]+(?:\\s+[A-Z][a-z]+){1,3})\\b"
    DATES: "\\b(\\d{1,2}[/.-]\\d{1,2}[/.-]\\d{2,4})\\b"
    
  # Tier 3: Emergency extraction patterns
  emergency_patterns:
    any_currency: "(\\$[\\d,.]+)"
    any_number: "(\\d+)"
    any_caps: "\\b([A-Z]{2,})\\b"

# Success Validation Rules
validation_rules:
  minimum_extractions:
    any_format: 1  # At least 1 field extracted
    structured: 3  # At least 3 fields for structured
    table: 2       # At least 2 fields for table
    
  quality_checks:
    key_value_ratio: 0.5  # At least 50% of lines should be key-value pairs
    content_density: 0.3  # At least 30% of content should be meaningful
    
  field_validation:
    ABN:
      pattern: "^\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{3}$|^\\d{11}$"
      required_length: [11, 14]  # 11 digits or 14 with spaces
    TOTAL:
      pattern: "^\\$?\\d+\\.\\d{2}$"
      numeric_check: true
    DATE:
      pattern: "^\\d{1,2}[/.-]\\d{1,2}[/.-]\\d{2,4}$"

# Output Configuration
output_format:
  key_value_separator: ": "
  line_separator: "\\n"
  key_normalization:
    uppercase: true
    replace_spaces: "_"
    max_length: 20
    
  value_cleaning:
    trim_whitespace: true
    remove_quotes: true
    normalize_currency: true
    
  fallback_behavior:
    on_no_extraction: "return_raw_content"
    on_partial_extraction: "return_structured_plus_raw"
    on_validation_failure: "return_best_effort"

# Debug and Logging Configuration  
debug_settings:
  log_format_detection: true
  log_state_transitions: true
  log_pattern_matches: true
  log_fallback_usage: true
  
  performance_monitoring:
    track_processing_time: true
    track_pattern_efficiency: true
    track_success_rates: true

# Integration Settings for model_comparison.py
integration:
  replace_existing_converter: true
  maintain_backward_compatibility: true
  enable_progressive_enhancement: true
  
  fallback_to_original:
    on_error: true
    on_timeout: true
    timeout_seconds: 5