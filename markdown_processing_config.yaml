# AWK-like Markdown Processing Configuration
# This file defines patterns, rules, and processing stages for robust markdown-to-keyvalue conversion

# Format Detection Patterns - Tuned for real Llama-3.2-Vision output
format_detection:
  structured_keyvalue:
    patterns:
      - "^[A-Z_]+:\\s*"  # Direct KEY: value format (e.g., "DATE: 08/07/2025")
      - "^[A-Z][A-Z_\\s]*:\\s*"  # Flexible uppercase keys (e.g., "BUSINESS ADDRESS: ...")
      - "^[A-Za-z][A-Za-z\\s_]*:\\s*"  # Mixed case keys (e.g., "Email: ...")
      - "\\n[A-Z_]+:"  # KEY: anywhere in text
      - "\\n[A-Za-z][A-Za-z\\s_]*:"  # Flexible keys anywhere
    confidence_threshold: 2  # Lower threshold - need just 2 KEY:VALUE pairs
    
  markdown_table:
    patterns:
      - "\\|.*\\|.*\\|"  # Contains table pipes with content
      - "^\\|\\s*[^|]+\\s*\\|\\s*[^|]+\\s*\\|"  # Header row pattern
    confidence_threshold: 3  # Higher threshold - must be clearly a table
    
  bullet_list:
    patterns:
      - "^\\s*\\*\\s+[^:]+:"  # Bullet points with colons
      - "^\\s*-\\s+[^:]+:"   # Dash points with colons
      - "\\*\\s+[A-Z][A-Za-z\\s]*:"  # Bullets anywhere in text
    confidence_threshold: 2
    
  plain_text:
    patterns:
      - ".*"  # Catch-all fallback
    confidence_threshold: 0

# Multi-stage Processing Pipeline (AWK-style BEGIN/MAIN/END)
processing_stages:
  # Stage 1: Format Detection and Preparation (BEGIN phase)
  begin_phase:
    - normalize_whitespace
    - detect_format
    - initialize_context
    
  # Stage 2: Content Processing (MAIN phase)
  main_phase:
    - extract_by_format
    - apply_fallback_patterns
    - validate_extractions
    
  # Stage 3: Cleanup and Finalization (END phase)
  end_phase:
    - clean_artifacts
    - format_output
    - final_validation

# Context State Machine - Track processing state
state_machine:
  states:
    - unknown
    - table_header
    - table_row
    - bullet_list
    - structured_kv
    - plain_text
    - error_fallback
    
  transitions:
    unknown:
      - table_header: "detect_table_start"
      - bullet_list: "detect_bullet_start"
      - structured_kv: "detect_kv_pattern"
      - plain_text: "default_fallback"
      
    table_header:
      - table_row: "process_table_content"
      - plain_text: "table_end_detected"
      
    table_row:
      - table_row: "continue_table"
      - plain_text: "table_end_detected"

# Format-specific Processing Rules
format_processors:
  markdown_table:
    patterns:
      header_row: "\\|\\s*([^|]+)\\s*\\|\\s*([^|]+)\\s*\\|"
      data_row: "\\|\\s*([^|]+)\\s*\\|\\s*([^|]+)\\s*\\|"
      separator: "^\\|[-\\s|]+\\|$"
    key_column: 0  # First column contains keys
    value_column: 1  # Second column contains values
    cleanup_patterns:
      - "^\\s*\\|\\s*"  # Remove leading pipes
      - "\\s*\\|\\s*$"  # Remove trailing pipes
      - "[-\\s]+"  # Remove separator content
      
  bullet_list:
    patterns:
      bullet_kv: "^\\s*[\\*-]\\s*([^:]+):\\s*(.+)$"
      nested_bullet: "^\\s{2,}[\\*-]\\s*([^:]+):\\s*(.+)$"
    cleanup_patterns:
      - "^\\s*[\\*-]\\s*"  # Remove bullet markers
      
  structured_keyvalue:
    patterns:
      # Enhanced patterns to match all real Llama output formats
      standard_kv: "^([A-Z_]+):\\\\s*(.+)$"
      flexible_kv: "^([a-zA-Z][a-zA-Z\\\\s_()]*):\\\\s*(.+)$"
      mixed_case_kv: "^([A-Z][a-zA-Z_\\\\s]*):\\\\s*(.+)$"
      bracketed_kv: "^([A-Z_]+):\\s*\\[([^\\]]+)\\]$"
      parentheses_kv: "^([A-Z_]+)\\\\s*\\\\(([^)]+)\\\\):\\\\s*(.+)$"
      complex_key: "^([A-Z][A-Za-z_\\s()-]+):\\s*(.+)$"
      # Handle keys that appear mid-line
      inline_kv: "\\\\n([A-Z_]+):\\\\s*([^\\\\n]+)"
      inline_mixed: "\\\\n([A-Z][A-Za-z_\\\\s]+):\\\\s*([^\\\\n]+)"
    key_normalization:
      uppercase: true
      replace_spaces: "_"
      remove_special_chars: "[^A-Z_]"
      max_key_length: 50  # Allow longer keys

# Fallback Pattern Library - Enhanced for all business fields
fallback_patterns:
  # Tier 1: Business-specific patterns (comprehensive field set)
  business_patterns:
    # Core financial fields
    ABN: 
      - "(?:ABN|A\\.B\\.N\\.?)\\s*:?\\s*(\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{3})"
      - "\\b(\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{3})\\b"
      - "\\b(\\d{11})\\b"
    TOTAL:
      - "(?:TOTAL|Total)\\s*:?\\s*(\\$\\d+\\.\\d{2})"
      - "(?:TOTAL|Total)\\s*:?\\s*(\\$\\d+)"
      - "\\$\\d+\\.\\d{2}(?=\\s*$)"
    SUBTOTAL:
      - "(?:SUBTOTAL|Subtotal)\\s*:?\\s*(\\$\\d+\\.\\d{2})"
      - "(?:SUBTOTAL|Subtotal)\\s*:?\\s*(\\$\\d+)"
    GST:
      - "(?:GST|GST \\(10%\\)|gst)\\s*:?\\s*(\\$\\d+\\.\\d{2})"
      - "(?:GST|GST \\(10%\\)|gst)\\s*:?\\s*(\\$\\d+)"
      - "(?:GST|GST \\(10%\\)|gst)\\s*:?\\s*(10%)"
    
    # Date fields
    DATE:
      - "(?:DATE|Date)\\s*:?\\s*(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})"
      - "\\b(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})\\b"
      - "\\b(\\d{1,2}\\.\\d{1,2}\\.\\d{2,4})\\b"
    INVOICE_DATE:
      - "(?:INVOICE_DATE|Invoice Date)\\s*:?\\s*(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})"
    DUE_DATE:
      - "(?:DUE_DATE|Due Date)\\s*:?\\s*(\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4})"
    TIME:
      - "(?:TIME|Time)\\s*:?\\s*(\\d{1,2}:\\d{2}(?::\\d{2})?)"
      - "\\b(\\d{1,2}:\\d{2}\\s*(?:AM|PM))\\b"
    
    # Business identity fields
    STORE:
      - "(?:STORE|SUPPLIER|Store|Supplier)\\s*:?\\s*([A-Z][A-Za-z\\s&'.-]+)"
      - "\\b([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)+)\\b"
      - "^([A-Z\\s&'.-]+)(?=\\s*ABN|$)"
    SUPPLIER:
      - "(?:SUPPLIER|Supplier)\\s*:?\\s*([A-Z][A-Za-z\\s&'.-]+)"
    BUSINESS_NAME:
      - "(?:BUSINESS_NAME|Business Name)\\s*:?\\s*([A-Z][A-Za-z\\s&'.-]+)"
    BUSINESS_ADDRESS:
      - "(?:BUSINESS_ADDRESS|Business Address|ADDRESS|Address)\\s*:?\\s*([A-Za-z0-9\\s,.-]+)"
    BUSINESS_PHONE:
      - "(?:BUSINESS_PHONE|Business Phone|PHONE|Phone)\\s*:?\\s*(\\([0-9]+\\)\\s*[0-9\\s-]+)"
      - "(?:BUSINESS_PHONE|Business Phone|PHONE|Phone)\\s*:?\\s*([0-9\\s()-]+)"
    
    # Transaction fields
    RECEIPT_NUMBER:
      - "(?:RECEIPT_NUMBER|RECEIPT|Receipt)\\s*:?\\s*([A-Z0-9#-]+)"
      - "(?:RECEIPT_NUMBER|RECEIPT|Receipt)\\s*:?\\s*(#[0-9]+)"
      - "\\b(R[0-9]+)\\b"
      - "\\b(#[0-9]+)\\b"
    INVOICE_NUMBER:
      - "(?:INVOICE_NUMBER|Invoice Number)\\s*:?\\s*([A-Z0-9-]+)"
    PAYMENT_METHOD:
      - "(?:PAYMENT_METHOD|PAYMENT|Payment)\\s*:?\\s*([A-Z]+)"
      - "(?:VISA|MASTERCARD|EFTPOS|AFTERPAY|CASH)"
    CARD_NUMBER:
      - "(?:CARD|Card)\\s*:?\\s*(XXXX-XXXX-XXXX-XXXX-[0-9]+)"
      - "\\b(XXXX-XXXX-XXXX-XXXX-[0-9]+)\\b"
    AUTH_CODE:
      - "(?:AUTH|Auth)\\s*:?\\s*([A-Z0-9]+)"
    STATUS:
      - "(?:STATUS|Status)\\s*:?\\s*([A-Z]+)"
    
    # Item details
    ITEMS:
      - "(?:ITEMS|Items)\\s*:?\\s*([A-Za-z0-9\\s(),.-]+)"
    QUANTITIES:
      - "(?:QUANTITIES|Quantities)\\s*:?\\s*([0-9\\s|,]+)"
    PRICES:
      - "(?:PRICES|Prices)\\s*:?\\s*(\\$[0-9\\s|,.]+)"
    
    # Contact fields
    PHONE:
      - "(?:PHONE|Phone)\\s*:?\\s*(\\([0-9]+\\)\\s*[0-9\\s-]+)"
    EMAIL:
      - "(?:EMAIL|Email)\\s*:?\\s*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})"
    BILL_TO:
      - "(?:BILL_TO|Bill To)\\s*:?\\s*([A-Za-z\\s]+)"
    PAYER_NAME:
      - "(?:PAYER_NAME|Payer Name)\\s*:?\\s*([A-Za-z\\s()]+)"
    PAYER_ADDRESS:
      - "(?:PAYER_ADDRESS|Payer Address)\\s*:?\\s*([A-Za-z0-9\\s,.-]+)"
    
    # Banking fields
    BSB:
      - "(?:BSB|BSB)\\s*:?\\s*([0-9]{3}-[0-9]{3})"
      - "\\b([0-9]{3}-[0-9]{3})\\b"
    ACCOUNT_NUMBER:
      - "(?:ACCOUNT_NUMBER|Account Number)\\s*:?\\s*([0-9]+)"
    ACCOUNT_HOLDER:
      - "(?:ACCOUNT_HOLDER|Account Holder)\\s*:?\\s*([A-Za-z\\s]+)"
    STATEMENT_PERIOD:
      - "(?:STATEMENT_PERIOD|Statement Period)\\s*:?\\s*([0-9/\\s-]+to[0-9/\\s-]+)"
    
    # Document type
    DOCUMENT_TYPE:
      - "(?:DOCUMENT_TYPE|Document Type)\\s*:?\\s*([A-Za-z\\s]+)"
      - "(?:TAX INVOICE|INVOICE|RECEIPT|Invoice|Receipt)"
      
  # Tier 2: Generic content patterns  
  generic_patterns:
    AMOUNTS: "(\\$\\d+(?:\\.\\d{2})?)"
    NUMBERS: "\\b(\\d{4,})\\b"
    NAMES: "\\b([A-Z][a-z]+(?:\\s+[A-Z][a-z]+){1,3})\\b"
    DATES: "\\b(\\d{1,2}[/.-]\\d{1,2}[/.-]\\d{2,4})\\b"
    
  # Tier 3: Emergency extraction patterns
  emergency_patterns:
    any_currency: "(\\$[\\d,.]+)"
    any_number: "(\\d+)"
    any_caps: "\\b([A-Z]{2,})\\b"

# Success Validation Rules - Tuned for higher extraction rates
validation_rules:
  minimum_extractions:
    any_format: 1  # At least 1 field extracted
    structured_keyvalue: 1  # Lower threshold for structured (was 3)
    markdown_table: 2  # At least 2 fields for table
    bullet_list: 1    # At least 1 field for bullet
    plain_text: 1     # At least 1 field for plain text
    
  quality_checks:
    key_value_ratio: 0.2  # Lower requirement (was 0.5)
    content_density: 0.1  # Lower requirement (was 0.3)
    
  field_validation:
    ABN:
      pattern: "^\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{3}$|^\\d{11}$"
      required_length: [11, 14]  # 11 digits or 14 with spaces
    TOTAL:
      pattern: "^\\$?\\d+\\.\\d{2}$"
      numeric_check: true
    DATE:
      pattern: "^\\d{1,2}[/.-]\\d{1,2}[/.-]\\d{2,4}$"

# Output Configuration
output_format:
  key_value_separator: ": "
  line_separator: "\\n"
  key_normalization:
    uppercase: true
    replace_spaces: "_"
    max_length: 20
    
  value_cleaning:
    trim_whitespace: true
    remove_quotes: true
    normalize_currency: true
    
  fallback_behavior:
    on_no_extraction: "return_raw_content"
    on_partial_extraction: "return_structured_plus_raw"
    on_validation_failure: "return_best_effort"

# Debug and Logging Configuration  
debug_settings:
  log_format_detection: true
  log_state_transitions: true
  log_pattern_matches: true
  log_fallback_usage: true
  
  performance_monitoring:
    track_processing_time: true
    track_pattern_efficiency: true
    track_success_rates: true

# Integration Settings for model_comparison.py
integration:
  replace_existing_converter: true
  maintain_backward_compatibility: true
  enable_progressive_enhancement: true
  
  fallback_to_original:
    on_error: true
    on_timeout: true
    timeout_seconds: 5